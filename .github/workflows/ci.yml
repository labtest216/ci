name: "health-check: Build Tag Push"

on:
  push:
    branches:
      #- main
    paths:
      #- public/**
      #- source/**
      - ci-test

env:
  REPO_TYPE: hub                                                  # ecr or hub
  REPO_NAME:
  AWS_REGION: us-east-1                                           # AWS region
  AWS_ROLE_ARN: arn:aws:iam::123456789012:role/GitHubActionsRole  # AWS Role ARN 
  IMAGE_NAME: ${{ github.event.repository.name }}                 # frontend, backend ai.
  IMAGE_SCAN: 'true'
  TELEG_SEND: 'true'
  SLACK_SEND: 'true'                                               # Enable image scanning

jobs:
  build-and-push:
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    environment: DEV

    steps:
    - name: Debug
      run: printenv | sort

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set buildx X86/ARM
      uses: docker/setup-buildx-action@v2

    - name: Build image
      uses: docker/build-push-action@v4
      with:
        context: ./${{ env.IMAGE_NAME }}
        push: false
        tags: |
          ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}-${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Scan image
      if: env.IMAGE_SCAN == 'true'
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
        format: table
        exit-code: '1'                       # Fail on severity
        ignore-unfixed: true                 # Ignore unfixable vulnerabilities
        vuln-type: 'os,library'              # Scan OS and library vulnerabilities
        severity: 'CRITICAL,HIGH'            # Fail on critical or high severity
        cache-dir: /tmp/trivy-cache          # Cache Trivy database
        skip-dirs: /tmp                      # Skip scanning temp directories

    - name: Login to aws ecr
      if: env.IMAGE_REPO_TYPE == 'ecr'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }} 
        aws-region: ${{ env.AWS_REGION }} 
        role-session-name: GitHubActionsSession

    - name: Push to aws ecr
      if: env.REPO_TYPE == 'ecr'
      uses: docker/build-push-action@v4
      with:
        context: ./${{ env.IMAGE_NAME }}
        push: true
        tags: |
          ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


    - name: Log in to docker hub
      if: env.REPO_TYPE == 'hub'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to docker hub
      if: env.REPO_TYPE == 'hub'
      uses: docker/build-push-action@v4
      with:
        context: ./${{ env.IMAGE_NAME }}
        push: true
        tags: |
          ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.ref }}-${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Send to telegram
      if: env.TELEG_SEND == 'hub'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID_FRONTEND }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          New Docker image pushed:
          - Repository: ${{ env.REPO_NAME }}
          - Image: ${{ env.IMAGE_NAME }}
          - Tag: latest